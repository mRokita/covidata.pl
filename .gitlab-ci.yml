stages:
  - build
  - test
  - release
  - deploy

variables:
  FRONT_TEST_IMAGE: registry.gitlab.com/mrokita/covidata.pl:frontend-$CI_BUILD_REF_NAME
  FRONT_RELEASE_IMAGE: registry.gitlab.com/mrokita/covidata.pl:frontend-latest
  API_TEST_IMAGE: registry.gitlab.com/mrokita/covidata.pl:api-$CI_BUILD_REF_NAME
  API_RELEASE_IMAGE: registry.gitlab.com/mrokita/covidata.pl:api-latest
  CRAWLER_TEST_IMAGE: registry.gitlab.com/mrokita/covidata.pl:crawler-$CI_BUILD_REF_NAME
  CRAWLER_RELEASE_IMAGE: registry.gitlab.com/mrokita/covidata.pl:crawler-latest
  SERVICE_TOKEN: ""
  SECRET_KEY: ""
  DB_PASSWORD: ""

before_script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com

build_frontend:
  cache:
    key: ${CI_COMMIT_REF_SLUG}
  only:
    refs:
      - master
    changes:
      - "frontend/*"
  stage: build
  image: docker/compose:alpine-1.25.5
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker info
  services:
    - docker:dind
  tags:
    - docker
  script:
    - export IMAGE_TAG=$CI_BUILD_REF_NAME
    - docker-compose build frontend
    - docker-compose push frontend

build_api:
  stage: build
  tags:
    - private-shell
  script:
    - export IMAGE_TAG=$CI_BUILD_REF_NAME
    - docker-compose build api
    - docker-compose push api

build_crawler:
  stage: build
  only:
    - master
  tags:
    - private-shell
  script:
    - export IMAGE_TAG=$CI_BUILD_REF_NAME
    - docker-compose build crawler
    - docker-compose push crawler
test-api:
  stage: test
  tags:
    - private-shell
  script:
    - docker run --env DB_PASSWORD=$DB_PASSWORD $API_TEST_IMAGE sh -c "python -m pytest --cov=. /app/tests/ --cov-report term-missing"
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
release-frontend-image:
  stage: release
  tags:
    - private-shell
  script:
    - docker pull $FRONT_TEST_IMAGE
    - docker tag $FRONT_TEST_IMAGE $FRONT_RELEASE_IMAGE
    - docker push $FRONT_RELEASE_IMAGE
  only:
    - master
release-api-image:
  stage: release
  tags:
    - private-shell
  script:
    - docker pull $API_TEST_IMAGE
    - docker tag $API_TEST_IMAGE $API_RELEASE_IMAGE
    - docker push $API_RELEASE_IMAGE
  only:
    - master
release-crawler-image:
  stage: release
  tags:
    - private-shell
  script:
    - docker pull $CRAWLER_TEST_IMAGE
    - docker tag $CRAWLER_TEST_IMAGE $CRAWLER_RELEASE_IMAGE
    - docker push $CRAWLER_RELEASE_IMAGE
  only:
    - master
deploy:
  stage: deploy
  only:
    - master
  tags:
    - private-shell
  script:
    - export SERVICE_TOKEN=$SERVICE_TOKEN
    - export SECRET_KEY=$SECRET_KEY
    - export DB_PASSWORD=$DB_PASSWORD
    - export IMAGE_TAG=latest
    - docker stack deploy --compose-file docker-compose.yml --resolve-image=always --with-registry-auth covidata
  when: manual